version: "3.8"
services:
  inventory-management:
    build:
      context: ./InventoryManagement
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - web-store
    ports:
      - 8080:8080
    environment:
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DOMAIN: ${DB_DOMAIN:-database}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-postgres}
      JWT_SECRET: ${JWT_SECRET:-changeIt}
    depends_on:
      database:
        condition: service_healthy
  ordering:
    build:
      context: ./Ordering
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - web-store
    ports:
      - 8081:8081
    environment:
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DOMAIN: ${DB_DOMAIN:-database}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-postgres}
    depends_on:
      - "inventory-management"
  reporting:
    build:
      context: ./Reporting
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - web-store
    ports:
      - 8082:8082
    environment:
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DOMAIN: ${DB_DOMAIN:-database}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-postgres}
    depends_on:
      - "ordering"
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - web-store
    ports:
      - 3000:3000
    environment:
      INVENTORY_MANAGEMENT_API: ${INVENTORY_MANAGEMENT_API:-http://inventory-management:8080/api}
      ORDERING_API: ${ORDERING_API:-http://ordering:8081/api}
      REPORTING_API: ${REPORTS_API:-http://reporting:8082/api}
      PORT: ${PORT:-3000}
  database:
    image: postgres:${POSTGRES_VERSION:-13.2}
    container_name: postgres
    restart: always
    networks:
      - web-store
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - 5432:5432
    volumes:
      - database-data:/var/lib/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  database-data:
    name: server-database

networks:
  web-store:
    name: web-store
    driver: bridge
